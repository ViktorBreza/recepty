name: Deploy to Production

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  actions: read

jobs:
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Security Audit
      run: |
        cd frontend
        npm audit --audit-level=critical || echo "‚ö†Ô∏è Non-critical vulnerabilities found, proceeding with deployment"
        
    - name: Check for sensitive data
      run: |
        # Check for hardcoded secrets, but exclude legitimate files
        if grep -r "password\|secret\|key" \
          --exclude-dir=node_modules \
          --exclude-dir=.git \
          --exclude-dir=__pycache__ \
          --exclude="*.pyc" \
          --exclude="*.db" \
          --exclude="package-lock.json" \
          --exclude=".env.*" \
          --exclude="DEPLOYMENT_GUIDE.md" \
          --exclude="README*" \
          --exclude="*.yml" \
          --exclude="*.yaml" \
          --exclude="deploy-pi.sh" \
          --exclude="backup.sh" \
          . | grep -i "hardcoded\|fake\|test123\|admin123\|changeme"; then
          echo "‚ùå Hardcoded secrets found!"
          exit 1
        else
          echo "‚úÖ No hardcoded secrets detected"
        fi

  test:
    needs: security-check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test Nginx Configuration
      run: |
        chmod +x scripts/test-nginx-config.sh
        ./scripts/test-nginx-config.sh
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        rm -rf node_modules package-lock.json
        npm install
        npm ls || true
    
    - name: Run Full Test Suite
      run: |
        cd backend
        python -m pytest --cov=. --cov-report=xml
        cd ../frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build Production Frontend
      run: |
        cd frontend
        NEXT_PUBLIC_API_URL=https://kitkuhar.com/api npm run build

  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Raspberry Pi (Production)
      run: |
        # Test webhook connectivity first
        echo "Testing webhook endpoint..."
        curl -f https://webhook.kitkuhar.com/health || echo "Health check failed"
        
        # Prepare webhook payload (escape commit message)
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        COMMIT_MSG_ESCAPED=$(echo "$COMMIT_MSG" | sed 's/"/\\"/g' | tr '\n' ' ')
        PAYLOAD="{\"ref\":\"refs/heads/main\",\"after\":\"${{ github.sha }}\",\"head_commit\":{\"message\":\"${COMMIT_MSG_ESCAPED}\"}}"
        echo "Payload: $PAYLOAD"
        
        # Create signature
        SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "${{ secrets.WEBHOOK_SECRET }}" | cut -d' ' -f2)
        echo "Signature: sha256=$SIGNATURE"
        
        # Send webhook request with verbose output
        echo "Sending webhook request..."
        HTTP_CODE=$(curl -X POST \
          -H "Content-Type: application/json" \
          -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
          -d "$PAYLOAD" \
          -w "%{http_code}" \
          -v \
          https://webhook.kitkuhar.com/webhook/deploy 2>&1 | tee /tmp/curl_output.txt | tail -1)
        
        echo "HTTP response code: $HTTP_CODE"
        echo "Full curl output:"
        cat /tmp/curl_output.txt
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "‚ùå Webhook deployment failed with status: $HTTP_CODE"
          exit 1
        else
          echo "‚úÖ Webhook deployment triggered successfully"
        fi
    
    - name: Wait for Production Deployment  
      run: sleep 300
    
    - name: Check Deployment Status
      run: |
        echo "Checking deployment status..."
        curl -f https://webhook.kitkuhar.com/status || echo "Status check failed"
    
    - name: Comprehensive Deployment Verification
      run: |
        chmod +x scripts/verify-deployment.sh
        ./scripts/verify-deployment.sh
    
    # Release creation disabled due to permissions issue
    # - name: Create Release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: v${{ github.run_number }}
    #     release_name: Release v${{ github.run_number }}
    #     body: |
    #       üöÄ Production deployment successful on Raspberry Pi!
    #       
    #       Changes included in this release:
    #       ${{ github.event.head_commit.message }}
    #     draft: false
    #     prerelease: false
    
    - name: Notify Production Deployment
      run: echo "üéâ Production environment deployed to Raspberry Pi successfully!"